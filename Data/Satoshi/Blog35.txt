I believe it’ll be possible for a payment processing
company to provide as a service the rapid
distribution of transactions with good-enough
checking in something like 10 seconds or less.
The network nodes only accept the first version of a
transaction they receive to incorporate into the block
they’re trying to generate. When you broadcast a
transaction, if someone else broadcasts a doublespend at the same time, it’s a race to propagate to
the most nodes first. If one has a slight head start,
it’ll geometrically spread through the network faster
and get most of the nodes.
A rough back-of-the-envelope example:

So if a double-spend has to wait even a second, it
has a huge disadvantage.
The payment processor has connections with many
nodes. When it gets a transaction, it blasts it out,
and at the same time monitors the network for
double-spends. If it receives a double-spend on any
of its many listening nodes, then it alerts that the
transaction is bad. A double-spent transaction
wouldn’t get very far without one of the listeners
hearing it. The double-spender would have to wait
until the listening phase is over, but by then, the
payment processor’s broadcast has reached most
nodes, or is so far ahead in propagating that the
double-spender has no hope of grabbing a significant
percentage of the remaining nodes.

The current system where every user is a network
node is not the intended configuration for large
scale. That would be like every Usenet user runs
their own NNTP server. The design supports letting
users just be users. The more burden it is to run a
node, the fewer nodes there will be. Those few nodes
will be big server farms. The rest will be client nodes
that only do transactions and don’t generate.

See the snack machine thread, I outline how a
payment processor could verify payments well
enough, actually really well (much lower fraud rate
than credit cards), in something like 10 seconds or
less. If you don’t believe me or don’t get it, I don’t
have time to try to convince you, sorry.