Right, nodes keep transactions in their working set
until they get into a block. If a transaction reaches
90% of nodes, then each time a new block is found,
it has a 90% chance of being in it.

That does not need to be checked for. The
transaction in whichever branch ends up getting
ahead becomes the valid one, the other is invalid. If
someone tries to double spend like that, one and
only one spend will always become valid, the others
invalid.
Receivers of transactions will normally need to hold
transactions for perhaps an hour or more to allow
time for this kind of possibility to be resolved.
They can still re-spend the coins immediately, but
they should wait before taking an action such as
shipping goods.

The attacker isn’t adding blocks to the end. He has
to go back and redo the block his transaction is in
and all the blocks after it, as well as any new blocks
the network keeps adding to the end whilehe’s doing
that. He’s rewriting history. Once his branch is
longer, it becomes the new valid one.
This touches on a key point. Even though everyone
present may see the shenanigans going on, there’s
no way to take advantage of that fact.
It is strictly necessary that the longest chain is
always considered the valid one. Nodes that were
present may remember that one branch was there
first and got replaced by another, but there would be
no way for them to convince those who were not
present of this. We can’t have subfactions of nodes
that cling to one branch that they think was first,
others that saw another branch first, and others that
Page 23
joined later and never saw what happened. The CPU
power proof-of-work vote must have the final say.
The only way for everyone to stay on the same page
is to believe that the longest chain is always the
valid one, no matter what.

The recipient just needs to verify it back to a depth
that is sufficiently far back in the block chain, which
will often only require a depth of 2 transactions. All
transactions before that can be discarded.

Right, exactly. When a node receives a block, it
checks the signatures of every transaction in it
against previous transactions in blocks. Blocks can
only contain transactions that depend on valid
transactions in previous blocks or the same block.
Transaction C could depend on transaction B in the
same block and B dependson transaction A in an
earlier block.

I appreciate your questions. I actually did this kind of
backwards. I had to write all the code before I could
convince myself that I could solve every problem,
then I wrote the paper. I think I will be able to release
the code sooner than I could write a detailed spec.
You’re already right about most of your assumptions
where you filled in the blanks.
