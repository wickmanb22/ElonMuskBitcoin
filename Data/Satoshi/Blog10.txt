I’ll try and hurry up and release the source code as
soon as possible to serve as a reference to help clear
up all these implementation questions.

Only the buyer signs, and there’s no blinding.

Identities are not used, and there’s no reliance on
recourse. It’s all prevention.

No challenges or secret shares. A basic transaction is
just what you see in the figure in section 2. A
signature (of the buyer) satisfying the public key of
the previous transaction, and a new public key (of
the seller) that must be satisfied to spend it the next
time.

Right, if it’s equal in length, ties are broken by
keeping the earliest one received.

There’s no need for reporting of “proof of double
spending” like that. If the same chain contains both
spends, then the block is invalid and rejected.
Page 45
Same if a block didn’t have enough proof-of-work.
That block is invalid and rejected. There’s no need to
circulate a report about it. Every node could see that
and reject it before relaying it.
If there are two competing chains, each containing a
different version of the same transaction, with one
trying to give money to one person and the other
trying to give the same money to someone else,
resolving which of the spends is valid is what the
whole proof-of-work chain is about.
We’re not “on the lookout” for double spends to
sound the alarm and catch the cheater. We merely
adjudicate which one of the spends is valid.
Receivers of transactions must wait a few blocks to
make sure that resolution has had time to complete.
Would be cheaters can try and simultaneously
double-spend all they want, and all they accomplish
is that within a few blocks, one of the spends
becomes valid and the others become invalid. Any
later double-spends are immediately rejected once
there’s already a spend in the main chain.
Even if an earlier spend wasn’t in the chain yet, if it
was already in all the nodes’ pools, then the second
spend would be turned away by all those nodes that
already have the first spend.

Right. They also refresh whenever a new transaction
comes in, so L pretty much contains everything in A
all the time.

It’s a Hashcash style SHA-256 proof-of-work (partial
pre-image of zero), not a signature.

If you’re thinking of it as a CPU-intensive digital
signing, then you may be thinking of a race to finish
a long operation first and the fastest always winning.
The proof-of-work is a Hashcash style SHA-256
collision finding. It’s a memoryless process where
you do millions of hashes a second, with a small
chance of finding one each time. The 3 or 4 fastest
nodes’ dominance would only be proportional to their
share of the total CPU power. Anyone’s chance of
finding a solution at any time is proportional to their
CPU power.
Page 47
There will be transaction fees, so nodes will have an
incentive to receive and include all the transactions
they can. Nodes will eventually be compensated by
transaction fees alone when the total coins created
hits the pre-determined ceiling.